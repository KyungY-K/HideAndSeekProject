<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="MyPageDAO">
 	 
 	 <select id="user_cont" parameterType="String" resultType="userDTO">
 	 	select * from tb_user where user_Id = #{userId} 
 	 </select>
 	 
 	 <!-- 구독페이지에서 사용하는 구독 신청을 위한 content -->
 	 <select id="sub_cont" parameterType="String" resultType="Subscribe_userDTO">
 	 <![CDATA[
 	 	select * from (select * from subscribe s join product p on s.product_no = p.product_no where sysdate > sub_date and sysdate < sub_enddate) sub
		join subscribe_user su 
		on sub.sub_package_no = su.sub_no
		where user_id = #{userId}
		]]>
 	 </select>
 	 
 	 <!-- 마이페이지에서 사용하는 마이페이지 사용자의 구독 이력 전체 -->
 	 <select id = "sub_content" parameterType="String" resultType="Subscribe_userDTO">
 	 	select distinct su.user_id, sub.sub_package, su.sub_start, sub.sub_price, su.user_status 
 	 	from (select * from subscribe s join product p on s.product_no = p.product_no) sub
		join subscribe_user su 
		on sub.sub_package_no = su.sub_no
		where user_id = #{userId}
 	 </select>
 	 
 	 <update id ="sub_delete" parameterType="int">
 	 	update sub_user_status set user_status = '구독취소' where user_id = #{userId}
 	 </update>
 	 
 	 <update id="sub_update">
 	 	update subscribe_user set sub_status = '취소' where sub_no = #{sub_no}
 	 </update>
 	 
 	 <update id="user_delete" parameterType="map">
 	 	update tb_user set user_leave = 0 where user_id = #{userId}
 	 </update>
 	 
 	 <select id="order_cont" parameterType="Map" resultType="orderDTO">
 	 	<![CDATA[
 	 	select * 
		from (select pall.*, row_number() over(order by order_date desc) rnum 
		from (select * from product p join tb_order o on p.product_no = o.product_no) pall
		where user_id = #{userId}) 
		where rnum >= #{startNo} and rnum <= #{endNo} order by order_date desc
 	 	]]>
	</select>
	
	<select id ="order_content" parameterType="String" resultType="OrderDTO">
		select * from tb_order tbo join product p on tbo.product_no = p.product_no where user_id = #{userId} and order_status ='배송완료'
	</select>
	
	
	<!-- 정렬 totalRecord -->
	 <select id ="order_all_count" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId}
 	 </select>
 	 
 	 <select id ="order_success_count" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '주문 완료'
 	 </select>
 	 
 	 <select id ="order_cancel_count" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '취소'
 	 </select>
 	 
 	 <select id ="delivering_count" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '배송중'
 	 </select>
 	 
 	 <select id ="delivery_complete_count" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '배송 완료'
 	 </select>
 	 
 	 
 	 
 	 
 	 <select id ="count_review" parameterType="String" resultType="int">
 	 	select count(*) as count from review where user_id = #{userId}
 	 </select>
 	 
	 <select id ="count_refund" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '취소'
 	 </select>
 	 
	 <select id ="count_delivery" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '배송중'
 	 </select>
 	 
	 <select id ="count_deliverycomplete" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '배송 완료'
 	 </select>
 	 
 	 <select id ="orderall" parameterType="String" resultType="int">
 	 	select count(*) as count from tb_order where user_id = #{userId} and order_status = '주문 완료'
 	 </select>
 	 
 	 <!-- 회원정보 수정 -->
 	 <update id="user_update" parameterType="map">
 	 	update tb_user set user_name = #{user_name}, user_pwd = #{user_pwd},
 	 	user_phone1 = #{user_phone1}, user_phone2 = #{user_phone2}, user_phone3 = #{user_phone3} where user_id = #{userId}
 	 </update>
 	 
 	 <!-- 리뷰 리스트 -->
 	 <select id="review_cont" parameterType="map" resultType="ReviewDTO">
 	 	<![CDATA[
 	 	select review_no, review_cont, review_file, (review_star*10) as review_star, review_date, user_id, product_name, product_amount
		from (select pall.*, row_number() over(order by review_date desc) rnum 
		from (select * from review re join product p on re.product_no = p.product_no where re.user_id = #{userId}) pall) 
		where rnum >= #{startNo} and rnum <= #{endNo} order by review_date desc
 	 	]]>
 	 </select>
 	 
 	 <!-- 배송지 리스트 -->
 	 <select id="delivery_cont" parameterType="String" resultType="DeliveryDTO">
 	 	select * from delivery where user_id = #{userId}
 	 </select>
 	 
 	 <insert id="review_insert" parameterType="ReviewDTO">
 	 	insert into review values(
  		(select nvl(max(review_no), 0) from review) +1,
  		'리뷰',
  		#{review_cont},
  		#{review_file},
  		#{review_star},
  		sysdate,
  		#{user_id},
  		#{product_no},
  		#{order_no}
  		)
 	 </insert>
 	 
 	 <insert id = "delivery_insert" parameterType="map">
 	 	insert into delivery values(#{zipcode}, #{addr}, #{extraAddr}, #{user_id}, #{check}, #{name}, #{deli_phone1}, #{deli_phone2}, #{deli_phone3}, (select nvl(max(deli_no), 0) from delivery) +1)
 	 </insert>
 	 
 	 <update id="default_update" parameterType="String">
 	 	update delivery set deli_default = 0 where user_id = #{userId}
 	 </update>
 	 
 	 <select id="deli_modify" parameterType="int" resultType="DeliveryDTO">
 	 	select * from delivery where deli_no = #{deli_no}
 	 </select>
 	 
 	 <update id="deli_modify_ok" parameterType="map">
 	 	update delivery set deli_name = #{name}, deli_zipcode = #{zipcode}, deli_addr1 = #{addr}, deli_addr2 = #{extraAddr}, deli_phone1 = #{deli_phone1}, deli_phone2 = #{deli_phone2}, deli_phone3 = #{deli_phone3}, deli_default = #{check} where deli_no = #{deli_no}
 	 </update>
 	 
 	 <select id="review_check" parameterType="map" resultType="int">
 	 	select nvl(count(*),0) from review where order_no = #{order_no} and user_id = #{userId}
 	 </select>
 	 
 	 <select id="order_all" resultType="OrderDTO" parameterType="map">
 	 	<![CDATA[
 	 	select * 
		from (select pall.*, row_number() over(order by order_date desc) rnum 
		from (select * from product p join tb_order o on p.product_no = o.product_no) pall
		where user_id = #{userId}) 
		where rnum >= #{startNo} and rnum <= #{endNo} order by order_date desc 
 	 	]]>
 	 
 	 </select>
 	 <select id="order_success" resultType="OrderDTO" parameterType="map">
 	 	<![CDATA[
 	 	select * 
		from (select pall.*, row_number() over(order by order_date desc) rnum 
		from (select * from product p join tb_order o on p.product_no = o.product_no) pall
		where user_id = #{userId} and order_status = '주문 완료') 
		where rnum >= #{startNo} and rnum <= #{endNo} order by order_date desc
 	 	]]>
 	 </select>
 	 <select id="order_cancel" resultType="OrderDTO" parameterType="map">
 	 	<![CDATA[
 	 	select * 
		from (select pall.*, row_number() over(order by order_date desc) rnum 
		from (select * from product p join tb_order o on p.product_no = o.product_no) pall
		where user_id = #{userId} and order_status = '취소') 
		where rnum >= #{startNo} and rnum <= #{endNo} order by order_date desc
 	 	]]>
 	 </select>
 	 <select id="delivering" resultType="OrderDTO" parameterType="map">
 	 	<![CDATA[
 	 	select * 
		from (select pall.*, row_number() over(order by order_date desc) rnum 
		from (select * from product p join tb_order o on p.product_no = o.product_no) pall
		where user_id = #{userId} and order_status = '배송중') 
		where rnum >= #{startNo} and rnum <= #{endNo} order by order_date desc
 	 	]]>
 	 </select>
 	 <select id="delivery_complete" resultType="OrderDTO" parameterType="map">
 	 	<![CDATA[
 	 	select * 
		from (select pall.*, row_number() over(order by order_date desc) rnum 
		from (select * from product p join tb_order o on p.product_no = o.product_no) pall
		where user_id = #{userId} and order_status = '배송 완료') 
		where rnum >= #{startNo} and rnum <= #{endNo} order by order_date desc
 	 	]]>
 	 </select>
 	 
 	 <update id="orderCancel" parameterType="int">
 	 	update tb_order set order_status = '취소' where order_no = #{order_no}
 	 </update>
 	 
  </mapper>
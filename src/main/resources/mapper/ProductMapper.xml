<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="ProductDAO">
  	<!-- parameterType 결과가 들어오는 값 
         resultType 결과가 나가는 값 -->
    <!-- 
  	형식) <![CDATA[쿼리문]]>
  	쿼리문을 작성할 때 조건식 기호(>, <, &)을 사용해야 하는데 XML에서는 이러한 기호들을 쿼리문의 조건식 기호로 인식하는것이 아니라
  	태그로 인식하는 경우가 발생한다. 이런 경우 에러가 발행한다. 따라서 조건식 기호들을 단순한 문자열로 인식시켜주어야 한다. -->
  
  	<!-- alias 모두 파일명과 똑같이 했으니 
  	resultType같은곳에 쓸때 똑같이 쓰시면 됩니다 (CardDAO, CardDTO) -->
  	
  	<!--  예시입니다
  	
	<select id="allCard" parameterType="int" resultType="CardDTO">
		select * from card
	</select>
	
    <insert id="" parameterType="CardDTO">
    
    </insert>
    
    <update id="" parameterType="CardDTO">
    
    </update>
	
	<delete id="" parameterType="int">

	</delete>
  
 	 -->
 	 
	<select id="getListCount" resultType="int">
		select count(*) from product where product_category = 'takju'
	</select>
	
	<select id="getListTagCount" parameterType="Map" resultType="int">
		select count(*) from product where product_category = 'takju' 
		<if test="dosu != null">
			and product_dosu in
			<foreach collection="dosu" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="sweet != null">
			and product_sweet in
			<foreach collection="sweet" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="acidity != null">
			and product_acidity in
			<foreach collection="acidity" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="soda != null">
			and product_soda in
			<foreach collection="soda" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="marterial != null">
			and product_material in
			<foreach collection="material" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="minprice != null">
			and product_price >= #{minprice}
		</if>
		
		<if test="maxprice != null">
			 and product_price <![CDATA[<=]]> #{maxprice}
		</if>
	</select>
	
 	 <!-- 최신순으로 정렬된 상품들을 불러오는 메서드 -->
 	 <select id="released" parameterType="PageDTO" resultType="ProductDTO">
		<![CDATA[select * from (select p.*, row_number() over(order by product_no desc) rnum from product p where product_category = 'takju') 
		where rnum >= #{startNo} and rnum <= #{endNo} order by product_date desc]]>
	</select>
	<!-- 최신순으로 정렬된 상품들을 불러오는 메서드 -->
	
	<!-- 평점순으로 정렬된 상품들을 불러오는 메서드 -->
	<select id="rating" parameterType="PageDTO" resultType="ProductDTO">
		<![CDATA[select * from (select p.*, row_number() over(order by product_no desc) rnum from product p where product_category = 'takju') 
		where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<!-- 평점순으로 정렬된 상품들을 불러오는 메서드 -->
	
	<!-- 리뷰 많은순으로 정렬된 상품들을 불러오는 메서드 -->
	<select id="star_count" parameterType="PageDTO" resultType="ProductDTO">
		<![CDATA[select SEQ,count,pno as product_no, product_name, product_category, product_introduce1,product_introduce2, 
		product_company, product_alcohol,product_dosu,product_sweet,product_acidity, product_soda, product_material,
		product_price,product_stock,product_point,product_thumbnail,product_status,product_date from 
		(SELECT ROW_NUMBER() OVER(ORDER BY b.count desc nulls last, A.product_date desc)AS SEQ, b.*, A.*, a.product_no as pno 
		FROM product A left join 
		(select product_no, count(*) as count from review group by product_no) b on a.product_no = b.product_no) where SEQ >=#{startNo} and SEQ <=#{endNo}]]>
	</select>
	<!-- 리뷰 많은순으로 정렬된 상품들을 불러오는 메서드 -->
	
	<!-- 판매순으로 정렬된 상품들을 불러오는 메서드 -->
	<select id="selling_count" parameterType="PageDTO" resultType="ProductDTO">
		<![CDATA[select SEQ,count,pno as product_no, product_name, product_category, product_introduce1,product_introduce2, 
		product_company, product_alcohol,product_dosu,product_sweet,product_acidity, product_soda, product_material,
		product_price,product_stock,product_point,product_thumbnail,product_status,product_date from 
		(SELECT ROW_NUMBER() OVER(ORDER BY b.count desc nulls last, A.product_date desc)AS SEQ, b.*, A.*, a.product_no as pno 
		FROM product A left join 
		(select product_no, count(*) as count from tb_order group by product_no) b on a.product_no = b.product_no) where SEQ >=#{startNo} and SEQ <=#{endNo}]]>
	</select>
	<!-- 판매순으로 정렬된 상품들을 불러오는 메서드 -->
	
	<!-- 높은 가격순으로 정렬된 상품들을 불러오는 메서드 -->
	<select id="price_high" parameterType="PageDTO" resultType="ProductDTO">
		<![CDATA[select * from (select p.*, row_number() over(order by product_price desc, product_date desc) rnum from product p where product_category = 'takju')
		where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<!-- 높은 가격순으로 정렬된 상품들을 불러오는 메서드 -->
	
	<!-- 낮은 가격순으로 정렬된 상품들을 불러오는 메서드 -->
	<select id="price_low" parameterType="PageDTO" resultType="ProductDTO">
		<![CDATA[select * from (select p.*, row_number() over(order by product_price, product_date desc) rnum from product p where product_category = 'takju')
		where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<!-- 낮은 가격순으로 정렬된 상품들을 불러오는 메서드 -->
	
	<select id="getProductTagList" parameterType="Map" resultType="ProductDTO">
		select * from (select p.*, row_number() over(order by product_no desc) rnum from product p where product_category = 'takju'
		<if test="dosu != null">
			and product_dosu in
			<foreach collection="dosu" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="sweet != null">
			and product_sweet in
			<foreach collection="sweet" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="acidity != null">
			and product_acidity in
			<foreach collection="acidity" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="soda != null">
			and product_soda in
			<foreach collection="soda" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="marterial != null">
			and product_material in
			<foreach collection="material" item="item" separator="," open="(" close=")">#{item}</foreach>
		</if>
		
		<if test="minprice != null">
			and product_price >= #{minprice}
		</if>
		
		<if test="maxprice != null">
			 and product_price <![CDATA[<=]]> #{maxprice})
		</if> 
		where rnum >= #{startNo} and rnum <![CDATA[<=]]> #{endNo}
	</select>
 	 
	<select id="allSearch" parameterType="String" resultType="ProductDTO">
  		 select * from product where ((product_name like '%' || #{keyword} || '%') or (product_company like '%' || #{keyword} || '%') or (product_no like '%' || #{keyword} || '%')) order by product_no desc 
	</select>
  	
	<select id="name" parameterType="String" resultType="ProductDTO">
  		 select * from product where product_name like '%' || #{keyword} || '%' order by product_no desc 
	</select>
  	
	<select id="company" parameterType="String" resultType="ProductDTO">
  		select * from product where product_company like '%' || #{keyword} || '%' order by product_no desc
	</select>
	
	<select id="adminProductCont" parameterType="int" resultType="ProductDTO">
  		select * from product where product_no = #{no}
  	</select>
  	
  	 
	<select id="getSearchListCount" parameterType="String" resultType="int">
		select count(*) from product where ((product_name like '%' || #{keyword} || '%') or (product_company like '%' || #{keyword} || '%') or (product_no like '%' || #{keyword} || '%')) order by product_no desc
	</select>
	
	<insert id="adminProductInsert" parameterType="ProductDTO">
  		insert into product values(
  		(select max(product_no) from product) +1,
  		#{product_name},
  		#{product_category},
  		#{product_introduce1},
  		#{product_introduce2},
  		#{product_company},
  		#{product_alcohol},
  		#{product_dosu},
  		#{product_sweet},
  		#{product_acidity},
  		#{product_soda},
  		#{product_material},
  		#{product_price},
  		#{product_stock},
  		#{product_price}*0.01,
  		#{product_thumbnail},
  		default,
  		sysdate)
  	</insert>
  
  	<!-- 판매중 > 품절 -->
  	<update id="productStatusChange" parameterType="int">
  		update product set product_status = '품절' where product_no = #{no}
    </update>
  
  	<!-- 품절 > 판매중 -->
  	<update id="productStatusChange2" parameterType="int">
  		update product set product_status = '판매' where product_no = #{no}
    </update>
  
  
  
  
  </mapper>
